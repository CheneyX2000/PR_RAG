# pyproject.toml
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rag-system"
version = "0.1.0"
description = "A modern RAG system with PgVector and model hot-switching"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Chengyou Xu", email = "xuchengyou728@gmail.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    # Core Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # RAG Framework
    "langchain>=0.1.0",
    "openai>=1.0.0",
    
    # Model Management
    "litellm>=1.0.0",
    "sentence-transformers>=2.3.0",
    
    # Database
    "pgvector>=0.2.0",
    "sqlalchemy>=2.0.0", 
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    
    # Document Processing
    "pypdf>=3.17.0",
    "python-multipart>=0.0.6",
    
    # Utilities
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
    "redis>=5.0.0",
    
    # Monitoring
    "prometheus-client>=0.19.0",
    "structlog>=24.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "deepeval>=0.20.0",
    "pre-commit>=3.5.0",
]

all = [
    "unstructured[all-docs]>=0.11.0",
]

[project.urls]
Homepage = "https://github.com/CheneyX2000/another_RAG"
Documentation = "https://github.com/CheneyX2000/another_RAG/docs"
Repository = "https://github.com/CheneyX2000/another_RAG"
Issues = "https://github.com/CheneyX2000/another_RAG/issues"

[tool.setuptools]
packages = ["src.rag_system"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
]
ignore = ["E501", "B008", "B905"]
target-version = "py39"

[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "sqlalchemy"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
[tool.coverage.report]
fail_under = 80